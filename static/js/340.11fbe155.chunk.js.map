{"version":3,"file":"static/js/340.11fbe155.chunk.js","mappings":"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","sources":["components/Schemas/schemas.js","components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import * as Yup from 'yup';\n// import { object, string } from 'yup';\n\nconst registerSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(/^\\s*\\S+\\s*$/, 'Email must be without spaces')\n    .matches(/\\S{7,}/, 'Email too short (min 7 symbols)')\n    .matches(\n      /^(?=.{7,63}$)([^а-яА-Я]+@([a-zA-Z]+\\.)+[a-zA-z]{2,3})$/g,\n      'Invalid email',\n    )\n    .matches(\n      /^[^-]+((.*[^-]))*@([a-zA-Z]+\\.)+[a-zA-z]{2,3}$/g,\n      'Dashes should only be inside email',\n    )\n    .required('Require field'),\n  password: Yup.string()\n    .min(7, 'Password too short (min 7)')\n    .max(32, 'Password too long (max 32)')\n    .matches(/^\\s*\\S+\\s*$/, 'Password must be without spaces')\n    .required('Require field'),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password')], 'Password must match')\n    .required('Require field'),\n  name: Yup.string()\n    .matches(/\\S{2,}/, 'Name too short (min 2)')\n    .matches(\n      /((\\s*[a-zA-Z]+\\s*){2,}|[a-zA-Z]{2,})/,\n      'Name must includes only Latin alphabet',\n    )\n    .required('Require field'),\n  phone: Yup.string()\n    .matches(\n      /^\\+38\\(0\\d{2}\\) \\d{3}-\\d{2}-\\d{2}$/,\n      'Invalid number. valid +38(0xx) xxx-xx-xx',\n    )\n    .required('Require field'),\n  location: Yup.string()\n    .matches(\n      /^(\\s*[a-zA-Z-]{2,}(?!,)\\s*|\\s*[a-zA-Z-]{2,},\\s+([a-zA-Z-]+\\s*)+\\s*)$/,\n      'Invalid format. valid: city or city, region',\n    )\n    .required('Require field'),\n});\n\n// const schemas = {\n//   registerSchema,\n// };\nexport default registerSchema;\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { baseColor } from 'components/baseStyles/Variables.styled';\n// import MaskedInput from 'react-text-mask';\n\nimport mobileBackground from '../../images/register/bg-register-mobile.png';\nimport tabletBackground from '../../images/register/bg-register-tablet.png';\nimport desktopBackground from '../../images/register/bg-register-desktop.png';\n\nexport const FormContainer = styled.div`\n  width: 100%;\n  @media screen and (min-width: 768px) {\n    padding-top: 170px;\n  }\n  @media screen and (min-width: 1280px) {\n    padding-top: 50px;\n  }\n`;\nexport const Title = styled.h1`\n  font-size: 24px;\n  font-weight: 700;\n  margin-bottom: 40px;\n  margin-top: 0;\n  @media screen and (min-width: 768px) {\n    font-size: 36px;\n    font-weight: 500;\n  }\n`;\nexport const FormRegister = styled(Form)`\n  position: relative;\n  width: 280px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding-top: 44px;\n  padding-bottom: 40px;\n  margin: 0 auto;\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    margin: 0 auto;\n    padding: 60px 0 40px 0;\n    background-color: ${baseColor.colors.white};\n    border-radius: 40px;\n    -webkit-box-shadow: 7px 4px 14px 0px rgba(0, 0, 0, 0.11);\n    -moz-box-shadow: 7px 4px 14px 0px rgba(0, 0, 0, 0.11);\n    box-shadow: 7px 4px 14px 0px rgba(0, 0, 0, 0.11);\n  }\n  @media screen and (min-width: 1280px) {\n    width: 618px;\n    padding: 60px 0 60px 0;\n  }\n  > div {\n    position: relative;\n  }\n`;\nexport const ShowPassword = styled.span`\n  display: inline-block;\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  right: 15px;\n  top: 50%;\n  transform: translateY(-80%);\n  color: grey;\n  cursor: pointer;\n  svg {\n    width: inherit;\n    height: inherit;\n  }\n`;\nexport const Input = styled(Field)`\n  width: 280px;\n  font-size: 14px;\n  line-height: 1.3;\n  padding: 11px 0 12px 14px;\n  background: ${baseColor.colors.mainBg};\n  border: 1px solid rgba(245, 146, 86, 0.5);\n  border-radius: 40px;\n  margin-bottom: 16px;\n  &:focus,\n  &:hover {\n    border-color: ${baseColor.colors.orange};\n    outline: none;\n  }\n  @media screen and (min-width: 768px) {\n    width: 448px;\n    font-size: 18px;\n    padding: 14px 0 13px 32px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 458px;\n  }\n`;\nexport const PhoneInput = styled.div`\n  width: 280px;\n  padding: 11px 0 12px 14px;\n  background: ${baseColor.colors.mainBg};\n  border: 1px solid rgba(245, 146, 86, 0.5);\n  border-radius: 40px;\n  margin-bottom: 16px;\n  &:focus,\n  &:hover {\n    border-color: ${baseColor.colors.orange};\n    outline: none;\n  }\n  @media screen and (min-width: 768px) {\n    width: 448px;\n    padding: 14px 0 13px 32px;\n    font-size: 18px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 458px;\n  }\n`;\nexport const Button = styled.button`\n  width: 100%;\n  padding: 11px 0 12px 14px;\n  text-align: center;\n  color: ${baseColor.colors.white};\n  background: ${baseColor.colors.orangeLight};\n  border: 1px solid rgba(245, 146, 86, 0.5);\n  border-radius: 40px;\n  margin: 24px 0 40px 0;\n  transform: scale(1);\n  transition: transform 0.5s;\n  cursor: pointer;\n  position: relative;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  :hover,\n  :focus {\n    transform: scale(1.05);\n    transition: transform 0.5s;\n  }\n  :hover:before {\n    left: 100%;\n  }\n  :before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: ${baseColor.colors.orangeLight};\n    transition: all 450ms;\n  }\n  :disabled {\n    opacity: 0.5;\n    cursor: auto;\n    transform: none;\n    transition: none;\n  }\n  :disabled:before {\n    transform: none;\n    transition: none;\n  }\n  @media screen and (min-width: 768px) {\n    width: 458px;\n    font-size: 20px;\n  }\n`;\nexport const BackButton = styled.button`\n  width: 100%;\n  padding: 11px 0 12px 14px;\n  text-align: center;\n  color: #000;\n  background: ${baseColor.colors.white};\n  border: 1px solid ${baseColor.colors.orangeLight};\n  border-radius: 40px;\n  margin: -26px 0 40px 0;\n  cursor: pointer;\n  transform: scale(1);\n  transition: transform 0.5s;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  :hover,\n  :focus {\n    transform: scale(1.05);\n    transition: transform 0.5s;\n  }\n  :hover:before {\n    left: 100%;\n  }\n  :before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: ${baseColor.colors.orangeLight};\n    transition: all 450ms;\n  }\n  @media screen and (min-width: 768px) {\n    width: 458px;\n    font-size: 20px;\n  }\n`;\nexport const ErrBox = styled.div`\n  position: absolute;\n  white-space: nowrap;\n  bottom: 0px;\n  left: 15px;\n  color: #e53e3e;\n  font-family: 'Manrope';\n  font-size: 12px;\n  font-style: normal;\n  line-height: 1.4;\n  letter-spacing: 0.03em;\n  @media screen and (min-width: 768px) {\n    left: 32px;\n  }\n`;\nexport const StyledLink = styled(Link)`\n  color: ${baseColor.colors.blue};\n  margin-left: 4px;\n  :hover,\n  :focus {\n    color: ${baseColor.colors.orangeLight};\n  }\n`;\nexport const BoxText = styled.div`\n  font-family: 'Manrope';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 16px;\n  display: flex;\n  align-items: center;\n  text-align: center;\n  letter-spacing: 0.04em;\n\n  color: rgba(17, 17, 17, 0.6);\n`;\n\nexport const Background = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: -100;\n  background-image: url(${mobileBackground});\n  background-position: center bottom;\n  background-size: contain;\n  background-repeat: no-repeat;\n  height: 100vh;\n  @media screen and (min-width: 768px) {\n    background-image: url(${tabletBackground});\n  }\n  @media screen and (min-width: 1280px) {\n    background-image: url(${desktopBackground});\n  }\n`;\n\nexport const SpinerWrapper = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux'; //useSelector\nimport { useFormik, Formik } from 'formik';\nimport { ImEye, ImEyeBlocked } from 'react-icons/im';\nimport registerSchema from '../Schemas/schemas';\n\n// import { selectIsLoading } from '../../redux/auth/selectors';\n// import { register } from '../../redux/auth/operations';\n\nimport {\n  FormRegister,\n  FormContainer,\n  Input,\n  Button,\n  Title,\n  ErrBox,\n  BackButton,\n  // PhoneInput,\n  ShowPassword,\n  StyledLink,\n  BoxText,\n  Background,\n  // SpinerWrapper,\n} from './RegisterForm.styled';\n\n// const phoneNumberMask = [\n//   '+',\n//   /\\d/,\n//   /\\d/,\n//   /\\d/,\n\n//   /\\d/,\n//   /\\d/,\n\n//   /\\d/,\n//   /\\d/,\n//   /\\d/,\n\n//   /\\d/,\n//   /\\d/,\n\n//   /\\d/,\n//   /\\d/,\n// ];\n\nconst RegisterForm = () => {\n  const [isShown, setIsShown] = useState(true); //\n  const [showPass, setShowPass] = useState(false);\n  const [showConfirmPass, setShowConfirmPass] = useState(false);\n  // const loading = useSelector(selectIsLoading);\n  // const {is}= useAuth();\n  const dispatch = useDispatch();\n  const register = useState(false);\n\n  const showForm = () => {\n    setIsShown(false);\n  };\n\n  const hideForm = () => {\n    setIsShown(true);\n  };\n\n  const onSubmit = values => {\n    const { name, email, password, phone, location } = values;\n    dispatch(\n      register({\n        name,\n        email,\n        password,\n        phone,\n        location,\n      }),\n      hideForm(),\n    );\n  };\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      phone: '',\n      location: '',\n    },\n    validationSchema: registerSchema,\n    onSubmit,\n  });\n\n  const isValid =\n    (formik.errors.email && formik.touched.email) ||\n    (formik.errors.password && formik.touched.password) ||\n    (formik.errors.confirmPassword && formik.touched.confirmPassword) ||\n    formik.values.email === '' ||\n    formik.values.confirmPassword === ''\n      ? true\n      : false;\n\n  const showPassword = () => {\n    setShowPass(!showPass);\n  };\n  const showConfirmPassword = () => {\n    setShowConfirmPass(!showConfirmPass);\n  };\n  return (\n    <>\n      {/* {loading ? (\n        <SpinerWrapper>\n          {/* <Spinner /> */}\n      {/* </SpinerWrapper> */}\n      {/* ) : (  */}\n      <FormContainer>\n        <Formik validationSchema={registerSchema}>\n          <FormRegister onSubmit={formik.handleSubmit} autoComplete=\"off\">\n            <Title>Register</Title>\n            {isShown && (\n              <>\n                <div>\n                <Input\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"Email\"\n                  validate={registerSchema.email}\n                  onChange={formik.handleChange}\n                  value={formik.values.email}\n                  onBlur={formik.handleBlur}\n                />\n\n                {formik.errors.email || formik.touched.email ? (\n                  <ErrBox>{formik.errors.email}</ErrBox>\n                  ) : null}\n                  </div>\n              </>\n            )}\n\n            {isShown && (\n              <>\n                <div>\n                  <Input\n                    name=\"password\"\n                    type={showPass ? 'text' : 'password'}\n                    placeholder=\"Password\"\n                    onChange={formik.handleChange}\n                    value={formik.values.password}\n                    onBlur={formik.handleBlur}\n                  />\n\n                  <ShowPassword onClick={showPassword}>\n                    {!showPass ? <ImEyeBlocked /> : <ImEye />}\n                  </ShowPassword>\n                  {formik.errors.password && formik.touched.password ? (\n                    <ErrBox>{formik.errors.password}</ErrBox>\n                  ) : null}\n                </div>\n              </>\n            )}\n            {isShown && (\n              <>\n                <div>\n                  <Input\n                    name=\"confirmPassword\"\n                    type={showConfirmPass ? 'text' : 'password'}\n                    placeholder=\"Confirm Password\"\n                    onChange={formik.handleChange}\n                    value={formik.values.confirmPassword}\n                    onBlur={formik.handleBlur}\n                  />\n                  <ShowPassword onClick={showConfirmPassword}>\n                    {!showConfirmPass ? <ImEyeBlocked /> : <ImEye />}\n                  </ShowPassword>\n                  {formik.errors.confirmPassword &&\n                  formik.touched.confirmPassword ? (\n                    <ErrBox>{formik.errors.confirmPassword}</ErrBox>\n                  ) : null}\n                </div>\n              </>\n            )}\n            {isShown && (\n              <Button type=\"button\" onClick={showForm} disabled={isValid}>\n                Next\n              </Button>\n            )}\n            {!isShown && (\n              <>\n                <div>\n                  <Input\n                    name=\"name\"\n                    type=\"text\"\n                    placeholder=\"Name\"\n                    onChange={formik.handleChange}\n                    value={formik.values.name}\n                    onBlur={formik.handleBlur}\n                  />\n\n                  {formik.errors.name && formik.touched.name ? (\n                    <ErrBox>{formik.errors.name}</ErrBox>\n                  ) : null}\n                </div>\n              </>\n            )}\n            {!isShown && (\n              <>\n                <div>\n                  <Input\n                    name=\"location\"\n                    type=\"text\"\n                    placeholder=\"Location, region\"\n                    onChange={formik.handleChange}\n                    value={formik.values.location}\n                    onBlur={formik.handleBlur}\n                  />\n\n                  {formik.errors.location && formik.touched.location ? (\n                    <ErrBox>{formik.errors.location}</ErrBox>\n                  ) : null}\n                </div>\n              </>\n            )}\n            {!isShown && (\n              <>\n                <div>\n                  <Input\n                    // mask={phoneNumberMask}\n                    id=\"phone\"\n                    type=\"phone\"\n                    placeholder=\"Mobile phone\"\n                    onChange={formik.handleChange}\n                    value={formik.values.phone}\n                    onBlur={formik.handleBlur}\n                    name=\"phone\"\n                  />\n\n                  {formik.errors.phone && formik.touched.phone ? (\n                    <ErrBox>{formik.errors.phone}</ErrBox>\n                  ) : null}\n                </div>\n              </>\n            )}\n            {!isShown && <Button type=\"submit\">Register</Button>}\n            {!isShown && (\n              <BackButton type=\"button\" onClick={hideForm}>\n                Back\n              </BackButton>\n            )}\n            <BoxText>\n              <span>Already have an account?</span>{' '}\n              <StyledLink to=\"/login\">Login</StyledLink>\n            </BoxText>\n          </FormRegister>\n        </Formik>\n        <Background></Background>\n      </FormContainer>\n      {/*  )} */}\n    </>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from \"components/RegisterForm/RegisterForm\";\nimport { Helmet } from \"react-helmet-async\";\n\nconst Register = () => {\n    return (\n        <div>\n            <Helmet>\n                <title>Register</title>\n            </Helmet>\n            <RegisterForm />\n        </div>\n    );\n}\n\nexport default Register;\n"],"names":["Yup","shape","email","matches","required","password","min","max","confirmPassword","oneOf","name","phone","location","FormContainer","styled","Title","FormRegister","Form","baseColor","ShowPassword","Input","Field","Button","BackButton","ErrBox","StyledLink","Link","BoxText","Background","mobileBackground","tabletBackground","desktopBackground","useState","isShown","setIsShown","showPass","setShowPass","showConfirmPass","setShowConfirmPass","dispatch","useDispatch","register","hideForm","formik","useFormik","initialValues","validationSchema","registerSchema","onSubmit","values","isValid","errors","touched","handleSubmit","autoComplete","type","placeholder","validate","onChange","handleChange","value","onBlur","handleBlur","onClick","disabled","id","to"],"sourceRoot":""}