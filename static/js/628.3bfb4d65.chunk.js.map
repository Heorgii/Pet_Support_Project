{"version":3,"file":"static/js/628.3bfb4d65.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { baseColor } from 'components/baseStyles/Variables.styled';\n\nimport mobileBackground from '../../images/register/bg-register-mobile.png';\nimport tabletBackground from '../../images/register/bg-register-tablet.png';\nimport desktopBackground from '../../images/register/bg-register-desktop.png';\n\nconst FormContainer = styled.div`\n  width: 100%;\n  @media screen and (min-width: 768px) {\n    padding-top: 170px;\n  }\n  @media screen and (min-width: 1280px) {\n    padding-top: 50px;\n  }\n`;\nconst Title = styled.h1`\n  font-size: 24px;\n  font-weight: 700;\n  margin-bottom: 40px;\n  margin-top: 0;\n  @media screen and (min-width: 768px) {\n    font-size: 36px;\n    font-weight: 500;\n  }\n`;\nconst FormLogin = styled(Form)`\n  position: relative;\n  width: 280px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding-top: 44px;\n  padding-bottom: 40px;\n  margin: 0 auto;\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    height: 492px;\n    margin: 0 auto;\n    padding: 60px 0 40px 0;\n    background-color: ${baseColor.colors.white};\n    border-radius: 40px;\n    -webkit-box-shadow: 7px 4px 14px 0px rgba(0, 0, 0, 0.11);\n    -moz-box-shadow: 7px 4px 14px 0px rgba(0, 0, 0, 0.11);\n    box-shadow: 7px 4px 14px 0px rgba(0, 0, 0, 0.11);\n  }\n  @media screen and (min-width: 1280px) {\n    width: 618px;\n    padding: 60px 0 60px 0;\n  }\n  > div {\n    position: relative;\n  }\n`;\nconst ShowPassword = styled.span`\n  display: inline-block;\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  right: 15px;\n  top: 50%;\n  transform: translateY(-80%);\n  color: grey;\n  cursor: pointer;\n  svg {\n    width: inherit;\n    height: inherit;\n  }\n`;\nconst Input = styled.input`\n  width: 280px;\n  font-size: 14px;\n  line-height: 1.3;\n  padding: 11px 0 12px 14px;\n  background: ${baseColor.colors.mainBg};\n  border: 1px solid rgba(245, 146, 86, 0.5);\n  border-radius: 40px;\n  margin-bottom: 16px;\n\n  &:focus,\n  &:hover {\n    border-color: ${baseColor.colors.orange};\n    outline: none;\n  }\n  @media screen and (min-width: 768px) {\n    width: 448px;\n    font-size: 18px;\n    padding: 14px 0 13px 32px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 458px;\n  }\n`;\nconst Button = styled.button`\n  width: 100%;\n  padding: 11px 0 12px 14px;\n  text-align: center;\n  color: ${baseColor.colors.white};\n  background: ${baseColor.colors.orangeLight};\n  border: 1px solid rgba(245, 146, 86, 0.5);\n  border-radius: 40px;\n  margin: 24px 0 40px 0;\n  transform: scale(1);\n  transition: transform 0.5s;\n  cursor: pointer;\n  position: relative;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  :hover,\n  :focus {\n    transform: scale(1.05);\n    transition: transform 0.5s;\n  }\n  :hover:before {\n    left: 100%;\n  }\n  :before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: ${baseColor.colors.orangeLight};\n    transition: all 450ms;\n  }\n  :disabled {\n    opacity: 0.5;\n    cursor: auto;\n    transform: none;\n    transition: none;\n  }\n  :disabled:before {\n    transform: none;\n    transition: none;\n  }\n  @media screen and (min-width: 768px) {\n    width: 458px;\n    font-size: 20px;\n  }\n`;\nconst ErrorBox = styled.div`\n  position: absolute;\n  white-space: nowrap;\n  bottom: 0px;\n  left: 15px;\n  color: #e53e3e;\n  font-family: 'Manrope';\n  font-size: 12px;\n  font-style: normal;\n  line-height: 1.4;\n  letter-spacing: 0.03em;\n  @media screen and (min-width: 768px) {\n    left: 32px;\n  }\n`;\nconst StyledLink = styled(Link)`\n  color: ${baseColor.colors.blue};\n  margin-left: 4px;\n  :hover,\n  :focus {\n    color: ${baseColor.colors.orangeLight};\n  }\n`;\nconst BoxText = styled.div`\n  font-family: 'Manrope';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 16px;\n  display: flex;\n  align-items: center;\n  text-align: center;\n  letter-spacing: 0.04em;\n  color: rgba(17, 17, 17, 0.6);\n`;\nconst Background = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: -100;\n  background-image: url(${mobileBackground});\n  background-position: center bottom;\n  background-size: contain;\n  background-repeat: no-repeat;\n  height: 100vh;\n  @media screen and (min-width: 768px) {\n    background-image: url(${tabletBackground});\n  }\n  @media screen and (min-width: 1280px) {\n    background-image: url(${desktopBackground});\n  }\n`;\n\nexport {\n  FormContainer,\n  Title,\n  FormLogin,\n  ShowPassword,\n  Input,\n  Button,\n  ErrorBox,\n  StyledLink,\n  BoxText,\n  Background,\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux'; //useSelector\nimport { useFormik, Formik } from 'formik';\nimport { ImEye, ImEyeBlocked } from 'react-icons/im';\n// import schemasLogin from '../LoginForm/ShemaesLogin/schemasLogin';\nimport * as Yup from 'yup';\n\nimport {\n    FormContainer,\n    Title,\n    FormLogin,\n    ShowPassword,\n    Input,\n    Button,\n    ErrorBox,\n    StyledLink,\n    BoxText,\n    Background,\n} from './LoginForm.styled';\n\nconst schemasLogin = Yup.object().shape({\n    email: Yup.string()\n      .matches(/^\\s*\\S+\\s*$/, 'Email must be without spaces')\n      .matches(/\\S{7,}/, 'Email too short (min 7 symbols)')\n      .matches(\n        /^(?=.{7,63}$)([^а-яА-Я]+@([a-zA-Z]+\\.)+[a-zA-z]{2,3})$/g,\n        'Invalid email',\n      )\n      .matches(\n        /^[^-]+((.*[^-]))*@([a-zA-Z]+\\.)+[a-zA-z]{2,3}$/g,\n        'Dashes should only be inside email',\n      )\n      .required('Require'),\n    password: Yup.string()\n      .min(7, 'Password too short (min 7)')\n      .max(32, 'Password too long (max 32)')\n      .matches(/^\\s*\\S+\\s*$/, 'Password must be without spaces')\n      .required('Require'),\n    });\n\nexport const LoginForm = () => {\n  const [isShown, setIsShown] = useState(true); //\n  const [showPass, setShowPass] = useState(false);\n\n  const dispatch = useDispatch();\n  const register = useState(false);\n\n\n  const hideForm = () => {\n    setIsShown(true);\n  };\n\n  const onSubmit = values => {\n    const { email, password } = values;\n    dispatch(\n      register({\n        email,\n        password,\n      }),\n      hideForm(),\n    );\n  };\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: schemasLogin,\n    onSubmit,\n  });\n\n  const isValid =\n    (formik.errors.email && formik.touched.email) ||\n    (formik.errors.password && formik.touched.password) ||\n    formik.values.email === ''\n      ? true\n      : false;\n\n  const showPassword = () => {\n    setShowPass(!showPass);\n  };\n  return (\n    <>\n      <FormContainer>\n        <Formik validationSchema={schemasLogin}>\n          <FormLogin onSubmit={formik.handleSubmit} autoComplete=\"off\">\n            <Title>Login</Title>\n            {isShown && (\n              <>\n                <div>\n                  <Input\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    validate={schemasLogin.email}\n                    onChange={formik.handleChange}\n                    value={formik.values.email}\n                    onBlur={formik.handleBlur}\n                  />\n\n                  {formik.errors.email || formik.touched.email ? (\n                    <ErrorBox>{formik.errors.email}</ErrorBox>\n                  ) : null}\n                </div>\n              </>\n            )}\n\n            {isShown && (\n              <>\n                <div>\n                  <Input\n                    name=\"password\"\n                    type={showPass ? 'text' : 'password'}\n                    placeholder=\"Password\"\n                    onChange={formik.handleChange}\n                    value={formik.values.password}\n                    onBlur={formik.handleBlur}\n                  />\n\n                  <ShowPassword onClick={showPassword}>\n                    {!showPass ? <ImEyeBlocked /> : <ImEye />}\n                  </ShowPassword>\n                  {formik.errors.password && formik.touched.password ? (\n                    <ErrorBox>{formik.errors.password}</ErrorBox>\n                  ) : null}\n                </div>\n              </>\n            )}\n\n            {isShown && (\n              <Button type=\"button\" disabled={isValid}>\n                Login\n              </Button>\n            )}\n\n            {!isShown && <Button type=\"submit\">Login</Button>}\n            <BoxText>\n              <span>Already have an account?</span>{' '}\n              <StyledLink to=\"/register\">Register</StyledLink>\n            </BoxText>\n          </FormLogin>\n        </Formik>\n        <Background></Background>\n      </FormContainer>\n\n    </>\n  );\n};\n\nexport default LoginForm;\n","import { LoginForm } from \"components/LoginForm/LoginForm\";\nimport { Helmet } from \"react-helmet-async\";\n\nconst Login = () => {\n    return (\n        <div>\n            <Helmet>\n                <title>Log in</title>\n            </Helmet>\n            <LoginForm />\n        </div>\n    );\n}\n\nexport default Login;"],"names":["FormContainer","styled","Title","FormLogin","Form","baseColor","ShowPassword","Input","Button","ErrorBox","StyledLink","Link","BoxText","Background","mobileBackground","tabletBackground","desktopBackground","schemasLogin","Yup","shape","email","matches","required","password","min","max","LoginForm","useState","isShown","setIsShown","showPass","setShowPass","dispatch","useDispatch","register","formik","useFormik","initialValues","validationSchema","onSubmit","values","isValid","errors","touched","handleSubmit","autoComplete","name","type","placeholder","validate","onChange","handleChange","value","onBlur","handleBlur","onClick","disabled","to"],"sourceRoot":""}