{"version":3,"file":"static/js/649.e0149cf3.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\nimport { Link } from 'react-router-dom';\n// import MaskedInput from 'react-text-mask';\nimport { baseColor } from 'components/baseStyles/Variables.styled';\nimport MaskedInput from 'react-text-mask';\n\nexport const FormContainer = styled.div`\n  width: 100%;\n  @media screen and (min-width: 768px) {\n    padding-top: 170px;\n  }\n  @media screen and (min-width: 1280px) {\n    padding-top: 50px;\n  }\n`;\nexport const Title = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n  margin-bottom: 40px;\n  margin-top: 0;\n  @media screen and (min-width: 768px) {\n    font-size: 36px;\n    font-weight: 500;\n  }\n`;\nexport const FormRegister = styled(Form)`\n  position: relative;\n  width: 280px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding-top: 44px;\n  padding-bottom: 40px;\n  margin: 0 auto;\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    margin: 0 auto;\n    padding: 60px 0 40px 0;\n    background-color: ${baseColor.colors.white};\n    border-radius: 40px;\n    -webkit-box-shadow: 7px 4px 14px 0px rgba(0, 0, 0, 0.11);\n    -moz-box-shadow: 7px 4px 14px 0px rgba(0, 0, 0, 0.11);\n    box-shadow: 7px 4px 14px 0px rgba(0, 0, 0, 0.11);\n  }\n  @media screen and (min-width: 1280px) {\n    width: 618px;\n    padding: 60px 0 60px 0;\n  }\n  > div {\n    position: relative;\n  }\n`;\nexport const ShowPassword = styled.span`\n  display: inline-block;\n  position: absolute;\n  width: 25px;\n  height: 25px;\n  right: 15px;\n  top: 50%;\n  transform: translateY(-80%);\n  color: grey;\n  cursor: pointer;\n  svg {\n    width: inherit;\n    height: inherit;\n  }\n`;\nexport const Input = styled(Field)`\n  width: 280px;\n  font-size: 14px;\n  line-height: 1.3;\n  padding: 11px 0 12px 14px;\n  background: ${baseColor.colors.mainBg};\n  border: 1px solid rgba(245, 146, 86, 0.5);\n  border-radius: 40px;\n  margin-bottom: 16px;\n  &:focus,\n  &:hover {\n    border-color: ${baseColor.colors.orange};\n    outline: none;\n  }\n  @media screen and (min-width: 768px) {\n    width: 448px;\n    font-size: 18px;\n    padding: 14px 0 13px 32px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 458px;\n  }\n`;\nexport const PhoneInput = styled(MaskedInput)`\n  width: 280px;\n  padding: 11px 0 12px 14px;\n  background: ${baseColor.colors.mainBg};\n  border: 1px solid rgba(245, 146, 86, 0.5);\n  border-radius: 40px;\n  margin-bottom: 16px;\n  &:focus,\n  &:hover {\n    border-color: ${baseColor.colors.orange};\n    outline: none;\n  }\n  @media screen and (min-width: 768px) {\n    width: 448px;\n    padding: 14px 0 13px 32px;\n    font-size: 18px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 458px;\n  }\n`;\nexport const Button = styled.button`\n  width: 100%;\n  padding: 11px 0 12px 14px;\n  text-align: center;\n  color: ${baseColor.colors.white};\n  background: ${baseColor.colors.orangeLight};\n  border: 1px solid rgba(245, 146, 86, 0.5);\n  border-radius: 40px;\n  margin: 24px 0 40px 0;\n  transform: scale(1);\n  transition: transform 0.5s;\n  cursor: pointer;\n  position: relative;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  :hover,\n  :focus {\n    transform: scale(1.05);\n    transition: transform 0.5s;\n  }\n  :hover:before {\n    left: 100%;\n  }\n  :before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: ${baseColor.colors.orangeLight};\n    transition: all 450ms;\n  }\n  :disabled {\n    opacity: 0.5;\n    cursor: auto;\n    transform: none;\n    transition: none;\n  }\n  :disabled:before {\n    transform: none;\n    transition: none;\n  }\n  @media screen and (min-width: 768px) {\n    width: 458px;\n    font-size: 20px;\n  }\n`;\nexport const BackButton = styled.button`\n  width: 100%;\n  padding: 11px 0 12px 14px;\n  text-align: center;\n  color: #000;\n  background: ${baseColor.colors.white};\n  border: 1px solid ${baseColor.colors.orangeLight};\n  border-radius: 40px;\n  margin: -26px 0 40px 0;\n  cursor: pointer;\n  transform: scale(1);\n  transition: transform 0.5s;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  :hover,\n  :focus {\n    transform: scale(1.05);\n    transition: transform 0.5s;\n  }\n  :hover:before {\n    left: 100%;\n  }\n  :before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: ${baseColor.colors.orangeLight};\n    transition: all 450ms;\n  }\n  @media screen and (min-width: 768px) {\n    width: 458px;\n    font-size: 20px;\n  }\n`;\nexport const ErrBox = styled.div`\n  position: absolute;\n  white-space: nowrap;\n  bottom: 0px;\n  left: 15px;\n  color: #e53e3e;\n  font-family: 'Manrope';\n  font-size: 12px;\n  font-style: normal;\n  line-height: 1.4;\n  letter-spacing: 0.03em;\n  @media screen and (min-width: 768px) {\n    left: 32px;\n  }\n`;\nexport const StyledLink = styled(Link)`\n  color: ${baseColor.colors.blue};\n  margin-left: 4px;\n  :hover,\n  :focus {\n    color: ${baseColor.colors.orangeLight};\n  }\n`;\nexport const BoxText = styled.div`\n  display: flex;\n  align-items: center;\n  text-align: center;\n  font-size: 12px;\n`;\nexport const SpinerWrapper = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';//useSelector\nimport { useFormik, Formik } from 'formik';\nimport { object, string, ref } from 'yup';\n// import Spinner from '../Spinner';\nimport { ImEye, ImEyeBlocked } from 'react-icons/im';\n\n// import { selectIsLoading } from '../../redux/auth/selectors';\n// import { register } from '../../redux/auth/operations';\n\n// import {\n//   emailRegex,\n//   phoneRegexp,\n//   cityRegexp,\n//   userNameRegexp,\n//   passwordRegexp,\n// } from '../../helpers/regExpsHelpers';\n\nimport {\n  FormRegister,\n  FormContainer,\n  Input,\n  Button,\n  Title,\n  ErrBox,\n  BackButton,\n  PhoneInput,\n  ShowPassword,\n  StyledLink,\n  BoxText,\n  // SpinerWrapper,\n} from './RegisterForm.styled';\n\n\n// const emailRegex = /^[^-][a-zA-Z0-9_.-]{1,64}@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/;\nconst phoneNumberMask = [\n  '+',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n\n  /\\d/,\n  /\\d/,\n\n  /\\d/,\n  /\\d/,\n  /\\d/,\n\n  /\\d/,\n  /\\d/,\n\n  /\\d/,\n  /\\d/,\n];\n\nconst registerSchema = object().shape({\n  password: string()\n    .min(7, 'Password must be at least 7 characters')\n    .max(32, 'Password must be at most 32 characters')\n    .matches( 'Must not contain spaces')\n    .required('Password is required'),\n  confirmPassword: string()\n    .required('Please confirm your password')\n    .oneOf([ref('password')], 'Passwords do not match'),\n  email: string()\n    .email('Invalid email address')\n    .matches('Invalid email address')\n    .required('Email is required'),\n  name: string()\n    .min(2, 'Min 2 symbols')\n    .matches('Only letters')\n    .required('Name is required'),\n  phone: string()\n    .min(13, 'Too Short!')\n    .matches('Bad phone number')\n    .required('Phone is required'),\n  city: string()\n    .matches('Error. Example: Brovary, Kyiv')\n    .required('City is required'),\n});\n\nconst RegisterForm = () => {\n  const [isShown, setIsShown] = useState(true);\n  const [showPass, setShowPass] = useState(false);\n  const [showConfirmPass, setShowConfirmPass] = useState(false);\n  // const loading = useSelector(selectIsLoading);\n  // const {is}= useAuth();\n  const dispatch = useDispatch();\n  const register = useState(false);\n\n  const showForm = () => {\n    setIsShown(false);                            \n  };\n  const hideForm = () => {\n    setIsShown(true);\n  };\n\n  const onSubmit = values => {\n    const { name, email, password, phone, city } = values;\n    dispatch(\n      register({\n        name,\n        email,\n        password,\n        phone,\n        city,\n      }),\n      hideForm()\n    );\n\n  };\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      phone: '',\n      city: '',\n    },\n    validationSchema: registerSchema,\n    onSubmit,\n  });\n\n  const isValid =\n    (formik.errors.email && formik.touched.email) ||\n    (formik.errors.password && formik.touched.password) ||\n    (formik.errors.confirmPassword && formik.touched.confirmPassword) ||\n    formik.values.email === '' ||\n    formik.values.confirmPassword === ''\n      ? true\n      : false;\n\n  const showPassword = () => {\n    setShowPass(!showPass);\n  };\n  const showConfirmPassword = () => {\n    setShowConfirmPass(!showConfirmPass);\n  };\n  return (\n    <>\n      {/* {loading ? (\n        <SpinerWrapper>\n          {/* <Spinner /> */}\n        {/* </SpinerWrapper> */}\n      {/* ) : (  */}\n        <FormContainer>\n          <Formik validationSchema={registerSchema}>\n            <FormRegister onSubmit={formik.handleSubmit} autoComplete=\"off\">\n              <Title>Register</Title>\n              {isShown && (\n                <>\n                  <div>\n                    <Input\n                      name=\"email\"\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      validate={registerSchema.email}\n                      onChange={formik.handleChange}\n                      value={formik.values.email}\n                      onBlur={formik.handleBlur}\n                    />\n\n                    {formik.errors.email || formik.touched.email ? (\n                      <ErrBox>{formik.errors.email}</ErrBox>\n                    ) : null}\n                  </div>\n                </>\n              )}\n\n              {isShown && (\n                <>\n                  <div>\n                    <Input\n                      name=\"password\"\n                      type={showPass ? 'text' : 'password'}\n                      placeholder=\"Password\"\n                      onChange={formik.handleChange}\n                      value={formik.values.password}\n                      onBlur={formik.handleBlur}\n                    />\n\n                    <ShowPassword onClick={showPassword}>\n                      {!showPass ? <ImEyeBlocked /> : <ImEye />}\n                    </ShowPassword>\n                    {formik.errors.password && formik.touched.password ? (\n                      <ErrBox>{formik.errors.password}</ErrBox>\n                    ) : null}\n                  </div>\n                </>\n              )}\n              {isShown && (\n                <>\n                  <div>\n                    <Input\n                      name=\"confirmPassword\"\n                      type={showConfirmPass ? 'text' : 'password'}\n                      placeholder=\"Confirm Password\"\n                      onChange={formik.handleChange}\n                      value={formik.values.confirmPassword}\n                      onBlur={formik.handleBlur}\n                    />\n                    <ShowPassword onClick={showConfirmPassword}>\n                      {!showConfirmPass ? <ImEyeBlocked /> : <ImEye />}\n                    </ShowPassword>\n                    {formik.errors.confirmPassword &&\n                    formik.touched.confirmPassword ? (\n                      <ErrBox>{formik.errors.confirmPassword}</ErrBox>\n                    ) : null}\n                  </div>\n                </>\n              )}\n              {isShown && (\n                <Button type=\"button\" onClick={showForm} disabled={isValid}>\n                  Next\n                </Button>\n              )}\n              {!isShown && (\n                <>\n                  <div>\n                    <Input\n                      name=\"name\"\n                      type=\"text\"\n                      placeholder=\"Name\"\n                      onChange={formik.handleChange}\n                      value={formik.values.name}\n                      onBlur={formik.handleBlur}\n                    />\n\n                    {formik.errors.name && formik.touched.name ? (\n                      <ErrBox>{formik.errors.name}</ErrBox>\n                    ) : null}\n                  </div>\n                </>\n              )}\n              {!isShown && (\n                <>\n                  <div>\n                    <Input\n                      name=\"city\"\n                      type=\"text\"\n                      placeholder=\"City, region\"\n                      onChange={formik.handleChange}\n                      value={formik.values.city}\n                      onBlur={formik.handleBlur}\n                    />\n\n                    {formik.errors.city && formik.touched.city ? (\n                      <ErrBox>{formik.errors.city}</ErrBox>\n                    ) : null}\n                  </div>\n                </>\n              )}\n              {!isShown && (\n                <>\n                  <div>\n                    <PhoneInput\n                      mask={phoneNumberMask}\n                      id=\"phone\"\n                      type=\"phone\"\n                      placeholder=\"Mobile phone\"\n                      onChange={formik.handleChange}\n                      value={formik.values.phone}\n                      onBlur={formik.handleBlur}\n                      name=\"phone\"\n                    />\n\n                    {formik.errors.phone && formik.touched.phone ? (\n                      <ErrBox>{formik.errors.phone}</ErrBox>\n                    ) : null}\n                  </div>\n                </>\n              )}\n              {!isShown && <Button type=\"submit\">Register</Button>}\n              {!isShown && (\n                <BackButton type=\"button\" onClick={hideForm}>\n                  Back\n                </BackButton>\n              )}\n              <BoxText>\n                <span>Already have an account?</span>{' '}\n                <StyledLink to=\"/login\">Login</StyledLink>\n              </BoxText>\n            </FormRegister>\n          </Formik>\n          {/* <Background></Background> */}\n        </FormContainer>\n      {/*  )} */}\n    </>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from \"components/RegisterForm/RegisterForm\";\nimport { Helmet } from \"react-helmet-async\";\n\nconst Register = () => {\n    return (\n        <div>\n            <Helmet>\n                <title>Register</title>\n            </Helmet>\n            <RegisterForm />\n        </div>\n    );\n}\n\nexport default Register;\n"],"names":["FormContainer","styled","Title","FormRegister","Form","baseColor","ShowPassword","Input","Field","PhoneInput","MaskedInput","Button","BackButton","ErrBox","StyledLink","Link","BoxText","phoneNumberMask","registerSchema","object","shape","password","string","min","max","matches","required","confirmPassword","oneOf","ref","email","name","phone","city","useState","isShown","setIsShown","showPass","setShowPass","showConfirmPass","setShowConfirmPass","dispatch","useDispatch","register","hideForm","formik","useFormik","initialValues","validationSchema","onSubmit","values","isValid","errors","touched","handleSubmit","autoComplete","type","placeholder","validate","onChange","handleChange","value","onBlur","handleBlur","onClick","disabled","mask","id","to"],"sourceRoot":""}